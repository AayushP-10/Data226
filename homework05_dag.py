# -*- coding: utf-8 -*-
"""Homework05_DAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N07UpgASoDAC_x6maSQ2LkkTVJR63Q60
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import snowflake.connector
import requests


def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()


@task
def return_last_90d_price(symbol):
    """
    Return the stock prices for only the open market days within the last 90 calendar days.
    """
    vantage_api_key = Variable.get('vantage_api_key')
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={vantage_api_key}'
    r = requests.get(url)
    data = r.json()

    results = []  # Empty list to hold stock info for trading days within the last 90 days
    last_90_days_date = datetime.today() - timedelta(days=90)  # Calculate the date 90 days ago

    # Check if the data exists in the API response
    if "Time Series (Daily)" not in data:
        return results  # Return an empty list if data is not available

    # Iterate over dates and collect only those within the last 90 days
    for d in sorted(data["Time Series (Daily)"].keys(), reverse=True):
        date_obj = datetime.strptime(d, "%Y-%m-%d")

        # Check if the date is within the last 90 calendar days
        if date_obj >= last_90_days_date:
            stock_info = data["Time Series (Daily)"][d]
            stock_info["date"] = d
            stock_info["Symbol"] = 'AAPL'
            results.append(stock_info)
        else:
            break  # Stop loop if date is beyond the last 90 days

    return results



@task
def load_stock_data_with_transaction(cur, data):
    try:
        # Start a transaction
        cur.execute("BEGIN;")  # Start the transaction

        # Create the table if it doesn't exist
        create_table_query = """
        CREATE OR REPLACE TABLE NEW.raw.stock_price (
            date DATE PRIMARY KEY,
            open FLOAT,
            high FLOAT,
            low FLOAT,
            close FLOAT,
            volume BIGINT,
            Symbol VARCHAR(15)
        );
        """
        cur.execute(create_table_query)
        print("Table created successfully!")

        # Prepare the SQL INSERT query
        insert_query = """
        INSERT INTO NEW.raw.stock_price (date, open, high, low, close, volume,Symbol)
        VALUES (%(date)s, %(open)s, %(high)s, %(low)s, %(close)s, %(volume)s, %(Symbol)s)
        """

        # Insert records into the table
        for record in data:
            record_to_insert = {
                'open': record['1. open'],
                'high': record['2. high'],
                'low': record['3. low'],
                'close': record['4. close'],
                'volume': record['5. volume'],
                'date': record['date'],  # Ensure date is present
                'Symbol': record['Symbol']


            }
            cur.execute(insert_query, record_to_insert)

        cur.execute("COMMIT;")  # Commit the transaction
        print("Data inserted successfully!")

    except Exception as e:
        # If there's an error, roll back the transaction
        cur.execute("ROLLBACK;")
        print(f"An error occurred: {e}")

    finally:
        cur.close()


with DAG(
    dag_id = 'Homework05',
    start_date = datetime(2024,9,21),
    catchup=False,
    tags=['ETL'],
    schedule = '30 2 * * *'
) as dag:
    cur = return_snowflake_conn()

    data = return_last_90d_price('AAPL')
    load_stock_data_with_transaction(cur, data)

